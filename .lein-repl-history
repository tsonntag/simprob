(use 'simprop.core=
)
(use 'simprop.core)
(pst)
(require 'simprop.core :reload9
(require 'simprop.core :reload)
(use 'simprop.core)
(use simprop.core)
(use 'simprop.core)
(use 'simprop.core :reload)
(require 'simprop.core :reload)
(run)
(simprop.core/run)
(use 'simprob.core)
(use 'simprob.redyellow)
(use 'simprob.redyellow :reload)
(use 'simprob.redyellow)
(run 2 chooser listener)
(run 10 chooser listener)
(use 'simprob.redyellow :reload)
(use 'simprob.core :reload)
(run 2 chooser listener)
(run 4 chooser listener)
(run 10 chooser listener)
(run 3 chooser listener)
(use 'simprob.core :reload)
(use 'simprob.redyellow :reload)
(run 3 chooser listener)
(use 'simprob.core :reload)
(run 3 chooser listener)
(run 10 chooser listener)
(use 'simprob.redyellow :reload)
(run 10 chooser listener)
(run 1000 chooser listener)
(run 10000 chooser listener)
(use 'simprob.redyellow :reload)
(use 'simprob.redyellow.core :reload)
(quit)
(use 'simprob.ry.gui )
(use 'simprob.ry.gui :reload)
(app)
(app :title "hi")
(app {:title "hi"})
(use 'simprob.ry.gui :reload)
(app {:title "hi"})
(use 'simprob.ry.gui :reload)
(future (app {:title "hi"}))
(use 'seesaw.core)
(native!)
(def f (frame :title "Hello"))
(-> pack! show!)
(-> fpack! show!)
(-> f pack! show!)
(config f :title)
(config! f :title "AAAAAAAAAAAAAAAAAAAAAAA")
(config! f :content "AAAAAAAAAAAAAAAAAAAAAAA")
(-> f show!)
(config! f :size [100 :by 200])
(config! f :size [200 :by 200])
(window-size)
(use 'seesaw.dev)
(show-options (frame))
(use :simprob.ry.gui :reload)
(use 'simprob.ry.gui :reload)
f
(show)
(display "foo")
(display
  (left-right-split "left" "right" divider-location 1/3))
  (left-right-split "left" "right" :divider-location 1/3))
(display  (left-right-split "left" "right" :divider-location 1/3))
(config! f :mininum-size [0 :by 0])
(def f
    (frame
      :title "Title"
      :on-close :exit))
(display  (left-right-split "left" "right" :divider-location 1/3))
(use 'simprob.ry.gui :reload)
f
(show)
(display "foo")
(display (border-panel :east "east" :west "west")
)
(use 'seesaw.cor)
(use 'seesaw.core)
(display (border-panel :east "east" :west "west"))
(use 'simprob.ry.gui :reload)
(pst)
(use 'simprob.ry.gui :reload)
:40
(use 'simprob.ry.gui :reload)
(pst)
(use 'simprob.ry.gui :reload)
(display "a")
f
(show)
(use 'simprob.ry.gui :reload)
(show)
(use 'simprob.ry.gui :reload)
(show)
(use 'simprob.ry.gui :reload)
(show)
@running?
(reset! running? true)
(reset! running? false)
(use 'simprob.ry.gui :reload)
(show)
(use 'simprob.ry.gui :reload)
(reset! running? false)
(reset! running? true)
(use 'simprob.ry.gui :reload)
(show)
(reset! n 1)
(use 'simprob.ry.gui :reload)
(show)
(use 'simprob.ry.gui :reload)
(show)
(use 'simprob.ry.gui :reload)
(show)
(use 'simprob.ry.gui :reload)
(show)
(use 'simprob.ry.gui :reload)
(show)
(board)
content
(def p (flow-panel)
)
(use 'seesaw.core)
(def p (flow-panel))
(config p :items)
(config! p :items (label "foo"))
(config! p :items [(label "foo")])
(use 'simprob.ry.gui :reload)
(show)
(board! (label "foo"))
(use 'simprob.ry.gui :reload)
(board! (label "foo"))
(show)
(board! (label "bar"))
(use 'simprob.ry :reload)
(pst)
(use 'simprob.ry.core :reload)
(pst)
(simprob.ry.core/run 2)
(simprob.ry.core/run 10)
(use 'simprob.ry.core :reload)
(simprob.ry.core/run 10)
(use 'simprob.ry.core :reload)
(simprob.ry.core/run 10)
(use 'simprob.ry.core :reload)
(simprob.ry.core/run 10)
(use 'simprob.ry.core :reload)
(simprob.ry.core/run 10)
(use 'simprob.ry.core :reload)
(simprob.ry.core/run 10)
(use 'simprob.ry.core :reload)
(simprob.ry.core/run 10)
(use 'simprob.ry.core :reload)
(simprob.ry.core/run 10)
(use 'simprob.ry.core :reload)
(simprob.ry.core/run 10)
(use 'simprob.ry.core :reload)
(simprob.ry.core/run 10)
(use 'simprob.ry.core :reload)
(simprob.ry.core/run 10)
(simprob.ry.core/run 100)
(use 'simprob.gui :reload)
(pst)
(use 'simprob.gui :reload)
(show)
(board! (label "mist"))
(use 'simprob.ry.core :reload)
(simprob.ry.core/run 100)
(str [])
(str [:a :b])
(use 'simprob.gui :reload)
(show)
(display=
)
(display)
(show)
(quit)
(use 'simprob.gui :reload)
(show)
(use 'simprob.gui :reload)
(show)
(require '[simprob.ry.gui :as rygui] :reload)
(use 'simprob.gui :reload)
(require '[simprob.ry.gui :as rygui] :reload)
(use 'simprob.gui :reload)
(require [simprob.ry :as ry]  :reload)
(require [simprob.ry.core :as ry]  :reload)
(require '[simprob.ry.core :as ry]  :reload)
(ry/chooser :red)
(require '[simprob.ry.gui :as rygui] :reload)
(quit)
(require '[simprob.ry.gui :as rygui] :reload)
(pst)
(require '[simprob.ry.gui :as rygui] :reload)
(require '[simprob.ry.core :as ry]  :reload)
(require '[simprob.gui :as gui]  :reload)
gui/board
(require '[simprob.ry.gui :as rygui] :reload)
(quit9
(quit)
(require '[simprob.ry.gui :as rygui] :reload)
(require 'simprob.gui :reload)
(require '[simprob.ry.gui :as rygui] :reload)
(require 'simprob.ry.core :reload)
(require '[simprob.ry.core :as ry] :reload)
(ry/run 1)
(ry/run 4)
(require '[simprob.core :as simprob] :reload)
(require '[simprob.ry.core :as ry] :reload)
(require '[simprob.core :as simprob] :reload)
(require '[simprob.ry.core :as ry] :reload)
(ry/run 4)
(pst)
(require '[simprob.ry.core :as ry] :reload)
(pst)
(ry/run 4)
(require '[simprob.ry.core :as ry] :reload)
(ry/run 4)
(pst)
(require '[simprob.ry.core :as ry] :reload)
(ry/run 4)
(require '[simprob.core :as simprob] :reload)
(ry/run 4)
(require '[simprob.core :as simprob] :reload)
(ry/run 4)
(require '[simprob.ry.core :as ry] :reload)
(ry/run 4)
(ry/run 10)
(require '[simprob.ry.gui :as rygui] :reload)
(for [entry {:a 1 :b 2} (println entry))
(for [entry {:a 1 :b 2}] (println entry))
(for [entry {:a 1 :b 2}] (println "XXX" entry))
(doseq [entry {:a 1 :b 2}] (println "XXX" entry))
(doseq [[key val] {:a 1 :b 2}] (println "XXX" key "V" val))
(require '[simprob.ry.gui :as rygui] :reload)
(require '[simprob.gui :as gui] :reload)
(pst)
(require '[simprob.core :as core] :reload)
(require '[simprob.gui :as gui] :reload)
(pst)
(quit)
(require '[simprob.gui :as gui] :reload)
(pst)
(require '[simprob.gui :as gui] :reload)
#
(require '[simprob.gui :as gui] :reload)
(show9
(show)
(gui/show)
(require '[simprob.gui :as gui] :reload)
(require '[simprob.core :as core] :reload)
core/initial-state
(require '[simprob.gui :as gui] :reload)
(quit)
(require '[simprob.gui :as gui] :reload)
(pst)
(reset! (atom 0) 1)
(def running?  (atom false))
 (reset! running? "")
(require '[simprob.gui :as gui] :reload)
(gui/show)
(require '[simprob.gui :as gui] :reload)
(gui/show)
(require '[simprob.gui :as gui] :reload)
(gui/show)
(require '[simprob.gui :as gui] :reload)
(gui/show)
(require '[simprob.gui :as gui] :reload)
(pst)
(require '[simprob.gui :as gui] :reload)
(pst)
(require '[simprob.gui :as gui] :reload)
(pst)
(require '[simprob.gui :as gui] :reload)
(pst)
(require '[simprob.gui :as gui] :reload)
(require '[simprob.core :as core] :reload)
(require '[simprob.gui :as gui] :reload)
